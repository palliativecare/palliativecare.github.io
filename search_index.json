[
["index.html", "PCRC Repository Guidebook Chapter 1 Introduction", " PCRC Repository Guidebook Palliative Care Research Cooperative 2018-02-21 Chapter 1 Introduction Studies in the PCRC repository have a standardized directory structure and minimum set of required associated files. This document lays out the requirements for directory structure and contents. Directory structure File naming standards Individual directory standards Individual file content standards "],
["directory-structure-and-file-naming-standards.html", "Chapter 2 Directory Structure and File Naming Standards 2.1 Code 2.2 Stanford University Libraries’ “File Naming Best Practices”", " Chapter 2 Directory Structure and File Naming Standards General file naming standards: Use CamelCode for the study name (e.g. StatinDiscontinuationStudyRCTData) Study instruments (forms) should be numbered in the chronological order administered, followed by a descriptive name. If a code or numbering system was used during the study, this can follow the number and descriptive name: 01_Eligibility_SDSRCT01.pdf Use underscores or hyphens to separate information in filenames. Do not use spaces within filenames. Structure: Study name Code Data cleaning Analysis dataset generation (if applicable) Descriptive and Primary Analysis Data Raw Clean Analysis (if applicable) Documentation Raw dataset dictionary Clean dataset dictionay Study Tools/Instruments Protocols Study Protocol (PDF) Publications Bibtex file of references for all publications based on study, including url/uri to online location PDF for articles that can be opening shared Reports Summary and Statistical Reports 2.1 Code Two primary sets of code are suggested for the repository: cleaning and analysis scripts. Both should use file naming standards previously mentioned. Require character variables to be either labeled (factors in R or varlabel in SAS) or standardized character strings Require variable labels in code-friendly format (CSV table: variable name, variable label; SAS ‘label’ statement; R dataframe; or REDCap script) Indicators/binary variables should be character and labeled (e.g. yes/no). clean01_readData.R clean02_wideToLong.R clean03_formatData.R analyze01_descriptives.R analyze02_PrimaryOutcomes_TimeToEvent.R analyze03_PrimaryOutcomes_LongitudinalQOL.R 2.2 Stanford University Libraries’ “File Naming Best Practices” via Stanford Libraries The most important things to remember about file naming are to be consistent and descriptive in naming and organizing your files so that it’s obvious where to find a file and what it contains. Information to consider including in file names: Project or experiment name or acronym Location/spatial coordinates Researcher name/initials Date or date range of experiment Type of data Conditions Version number of file Three-letter file extension for application-specific files These are suggestions; include whatever information will allow you to distinguish your files from each other and clearly indicate to you what is in them. Other tips for file naming: A good format for dates is YYYYMMDD (or YYMMDD). This makes sure all your files stay in chronological order, even over many years. Don’t make file names too long; longer names do not work well with all types of software. Special characters should be avoided: ~!@#$%^&amp;*()`;&lt;&gt;?,’&quot; For sequential numbering, use leading zeros to ensure files sort properly. For example, use “0001, 0002…1001r etc” instead of “1, 2…1001, etc.” Do not use spaces, because they are not recognized by some software. Instead use underscores (file_name), dashes (file-name), no separation (filename), or camel case (FileName). Consider including a README.txt file in your directory that explains your naming convention along with any abbreviations or codes you have used. "],
["final-words.html", "Chapter 3 Final Words", " Chapter 3 Final Words We have finished a nice book. "],
["references.html", "References", " References "]
]
